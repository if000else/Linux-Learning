正则表达式
注意事项：
1.Linux一般是以行为单位匹配处理的
2.alias grep='grep --color=auto'，加颜色
3.字符集，export LC_ALL=C

实例：
1.^word 搜索wordk开头的行
2.word$ word结尾行
3.^$表示空行
eg: grep -vn  "^$" oldboy.txt过滤掉空

4. . 代表且只能代表任意一个字符
5. \ 转义符号
6. * 匹配*前面的字符0次或者多次
7. .* 匹配所有字符
  eg: grep "." oldboy.txt匹配所有带字符的行，没有空
      grep ".* oldboy.txt匹配所有，包括空
      grep "0*" oldboy.txt 匹配有0或者空格的行
      grep -o "0.*" oldboy.txt 精确匹配有0的行
8.[abc] 匹配字符集合里的任意一个字符[a-zA-Z],[0-9]
9.[^abc]上面的非
10.a\{n,m} 重复n到m次前一个重复的字符。如果用egrep/sed的话，-r可以去掉斜线
  \{n,\} 重复至少n次前一个字符。如果用egrep/sed的话，-r可以去掉斜线
  \{n\}重复n次前一个字符。如果用egrep/sed的话，-r可以去掉斜线
  \{,m}重复至多n次前一个字符。如果用egrep/sed的话，-r可以去掉斜线
注意：egrep或者sed  -r过滤一般特殊字符可以不转义。
  eg：echo "oldboy oldgirl"|sed -r 's#(.*) (.*)#\1 \2#g'
     
     sed 取IP地址
     ifconfig eth0|sed -n '2p'|sed -r 's#.*addr:##g'|sed -r 's# Bc.*$##g'
     ifconfig eth0|sed -n '2p'|sed -r 's#^.*dr:(.*)  Bc.*$#\1#g'
11.+ 重复一个或者一个以上前面的字符
12.？重复0个或1个前面的字符
13. | 用或的方式查找多个字符串
14. () 找出"用户组"字符串
作业：输出 stat /etc/hosts里面的644
 stat /etc/hosts|awk -F '[0/]' 'NR==4{ print $2}
 stat /etc/hosts|sed -n '4p'|awk -F '[0/]' '{print $2}'
 stat /etc/hosts|sed -nr 's#.*\(0(.*)/-.*$#\1#gp'
 stat -c %a /etc/hosts(运维思想）


通配符，应用于命令bash环境，正则一般用于sed,grep,awk



1.* 通配符，任意（0个到多个）字符
2.？通配符，代表任意1个字符
3.;命令分割符
4.#注释
5.| 管道符
6.~ 用户家目录
7.- 上一次的目录
8.$ 变量前需要加的符号
9./ 路径分割符号
10.>或1>  重定向，覆盖
11.>>追加
12.<输入冲重定向
13.<<s输入追加重定向
14. ' 单引号，不具有变量置换功能，输出时所见即所得
15."双引号，具有变量置换功能，解析变量后输出
   eg:echo data  'data' `data`
   单引号看到什么就是什么，反引号执行命令，双引号里面可以解析
16.~ tab上面的键，反引号，两个反引号~~ 中间为命令，会先执行，等价$()
17.{} 中间为命令区块组合或者内容序列
18.! 逻辑运算的"非"(not)
19.&& 逻辑运算的与，前一个成功，就执行后一个
20. ..两个点，上一级目录，一个点 . 当前目录















